# 项目介绍一下
技术栈：SpringBoot+Redis+grpc+MySQL。
在这个项目中，我负责优化电商平台的推荐系统，在灰度发布和多团队协作方面做了改进。灰度能力升级，我设计实现了更灵活的灰度发布机制，使得团队可以更准确测试新功能。另外我做了多租户架构优化，我重新设计了系统租户结构，引入租户组和子服务，让系统更具拓展性。

灰度能力升级的实现。我引入更细力度的灰度控制机制，我在方案表中增加了abtestGrayKey字段，允许对子服务级别进行灰度发布，我实现了基于用户id或设备id的流量分配能力，利用LoadingCache缓存租户和子服务的配置信息，提高灰度判断效率。

多租户架构优化的实现，我在场景表中增加rule字段，这是一个json格式的字符串，包含更多配置选项，为每个场景设置不同的ab测试参数，实现不同的处理逻辑。然后是方案表增加租户字段，将方案和租户关联。在业务代码中，实现更复杂的租户选择逻辑，根据场景配置，ab测试参数，用户id等信息判断应该使用哪个租户的服务。

# 为什么你的项目要有租户组的概念？直接水平扩容不行吗？
因为一个租户组下两个租户，在处理用户流量时，他们不是隔离的，我们要对流量进行分配，类似于网关，调度的东西。

# protobuf的优点是什么？protobuf内部怎么实现的？

优点。protobuf使用二进制格式进行序列化，相比于json或xml，他占用的空间更小，传输速度更快。

跨平台和语言支持，protobuf支持多种编程语言，如java，python，c++等，使得不同平台和语言之间进行数据交换变得很方便。

向后兼容性。protobuf设计时考虑了版本控制，可以不破坏现有客户端的情况下，添加或删除字段。

protobuf内部实现。编码方式，protobuf使用一种称为**Varint**的编码方式表示整数，Varint是一种可变长度的编码，较小的数字使用较少字节，从而节省空间。

字段标识符和类型。在protobuf中，每个字段都有一个唯一的标识符和一个类型。标识符用于在解码时识别字段，类型则用于确定如何解析字段的数据。比如标识符为1的字段可能是一个整数。

消息结构。protobuf消息时由一系列字段组成的，每个字段都有一个类型和一个标识符。在编码时，protobuf会按照字段的标识符进行编码，解码时也会按照相同的顺序解码。

# 动态扩缩容怎么实现的？
有两方面概念吧，第一种就是说，对于微服务环境下的动态扩缩容能力，就是说公司里面有泳道的功能，就是说在线环境，我们可以创建一个a泳道和b泳道，对于他们的流量我们可以在配置平台可以做流量的切分，这是一个大的动态扩缩容能力。
第二种就是实例层面的话，容器也可以做到动态扩缩容，比如当前容器QPS的水位比较高，可以自己添加机器，我们自己去在方案里面调整映射表，然后去实现机器层面的扩缩容。
机器层面的动态扩缩容可能就涉及到我刚才讲到的后台服务，后台服务可以做到动态扩缩容，因为他后台管理服务可以路由当前服务的所有实例，一个实例在内网的话相当于有一个自己的IP地址和端口号，在请求的时候会对应于服务的租户的概念，相当于一个Id的概念，租户对应于一个实例。
# 投放是什么？
投放的流程可以抽象为读取浏览记录，召回，过滤，排序，写浏览记录。
# 编码方面的卡点：
LoadingCache失效的问题，流程已经走到QA提测，有不命中的问题，会爆NPE异常，当时排查了很久。
# 你是怎么排查的呢？
主要就是借助Arthas去看调用日志，具体是getTenantFromCacheByPlanId接口出了故障，最后发现是LoadingCache没命中导致的。最后通过设置缓存不命中回db源解决，同时异步更新LoadingCache。
# 在Arthas里，我想看一个方法的调用链路以及方法每个代码行的执行时间，命令是？
时间的话是看那个火焰图，查看调用链路，trace [方法全名]，查看每行代码的执行时间，monitor [方法全名]