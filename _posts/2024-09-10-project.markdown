# 项目介绍一下
负责的两个服务，core service和engine service。在线链路和后台管理链路。第二个服务相当于货架电商的后台管理服务，第一个服务会对线上的流量的处理。第二个就是后台的管理服务，我们增加了灰度的能力，对于用户的请求，比如对于三元三件的场景，我们可以去做流量的切分，实现两个方案同时对用户的请求做出响应，然后判断哪个方案更好，然后做实验，对实验结果验证后我们可以采取具体的方案。对这个项目来说，我具体做的任务就是两个接口吧，在这两个接口上做改造，比如getTenantBySceneId，对于一个具体的场景来说，我们会构建多个方案，刚才会有灰度的概念，我们现在的方案实际上是对应多个服务的，做了一次升级后我们对应多个服务，就是对原有的服务上做了一层逻辑，去判断一下当前请求过来的方案有没有数据库表里面的new_backend字段，是新的方案还是老的方案，如果是老的方案就会去走原有的链路，如果是新的方案，就会走新的方案。
# 动态扩缩容怎么实现的？
有两方面概念吧，第一种就是说，对于微服务环境下的动态扩缩容能力，就是说公司里面有泳道的功能，就是说在线环境，我们可以创建一个a泳道和b泳道，对于他们的流量我们可以在配置平台可以做流量的切分，这是一个大的动态扩缩容能力。
第二种就是实例层面的话，容器也可以做到动态扩缩容，比如当前容器QPS的水位比较高，可以自己添加机器，我们自己去在方案里面调整映射表，然后去实现机器层面的扩缩容。
机器层面的动态扩缩容可能就涉及到我刚才讲到的后台服务，后台服务可以做到动态扩缩容，因为他后台管理服务可以路由当前服务的所有实例，一个实例在内网的话相当于有一个自己的IP地址和端口号，在请求的时候会对应于服务的租户的概念，相当于一个Id的概念，租户对应于一个实例。
# 投放是什么？
投放的流程可以抽象为读取浏览记录，召回，过滤，排序，写浏览记录。
# 编码方面的卡点：
LoadingCache失效的问题，流程已经走到QA提测，有不命中的问题，会爆NPE异常，当时排查了很久。
# 你是怎么排查的呢？
主要就是借助Arthas去看调用日志，具体是getTenantFromCacheByPlanId接口出了故障，最后发现是LoadingCache没命中导致的。最后通过设置缓存不命中回db源解决，同时异步更新LoadingCache。
# 在Arthas里，我想看一个方法的调用链路以及方法每个代码行的执行时间，命令是？
时间的话是看那个火焰图，查看调用链路，trace [方法全名]，查看每行代码的执行时间，monitor [方法全名]