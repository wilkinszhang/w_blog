# 软件设计原则有哪些？
面向对象设计原则有7个。这些原则不是相互孤立的，相互依赖补充。
开闭原则，对拓展开放，对修改关闭。
单一职责原则，一个类只负责一个功能领域的相应职责。
里氏替换原则，所有引用基类对象的地方必须能透明的使用子类的对象。
依赖倒置原则，依赖于抽象，不能依赖于具体实现。
接口隔离原则，类之间的依赖关系应建立在最小的接口上。
合成聚合复用原则，尽量使用合成聚合而不是继承，来达到复用的目的。
迪米特原则，一个软件实体应最小化和其他实体发生相互作用。

# 什么是设计模式？
设计模式代表最佳实践，通常被有经验的软开人员使用，他是一套被反复使用的代码设计经验的总结。

# 设计模式的分类了解吗？
创建型，在创建对象的同时隐藏创建对象的逻辑，包括工厂模式，抽象工厂模式，单例模式，建造者模式，原型模式。
结构型，通过类和接口间的继承和引用实现复杂结构的对象，包括适配器模式，桥接器模式，装饰器模式，代理模式等。
行为型，通过类之间不同的通信方式实现不同行为，包括观察者模式等。

# 说一说简单工厂模式？
有一个工厂对象创建实例，客户端不要关注创建逻辑，只要提供传入工厂的参数。缺点是如果要新增产品，要**修改**工厂类判断逻辑，违背开闭原则。
![alt text](image.png)
# 工厂方法模式了解吗？
将生成具体产品的任务分发给具体的产品工厂。
![alt text](image-1.png)
# 抽象工厂模式了解吗？
简单工厂和工厂方法模式不管工厂怎么拆分，都是针对一类产品，如果要生成另一种产品，就比较难。抽象工厂模式在抽象工厂中新增**创建产品的接口**，并在子类中实现新加产品的创建。
![alt text](image-2.png)
# 什么是单例模式？它的特点是什么？
它属于创建型，一个单例类只存在一个实例。
# 单例模式的常见写法有哪些？
饿汉式，类一加载就创建对象。
双重检查锁，第一重检查私有静态instance是否为null，然后使用Synchronized加锁，第二重检查instance是否为null，然后才创建对象。
静态内部类，单例类的构造方法私有化，并且还有额外的静态内部类有静态最终单例类实例，当getInstance方法调用时，静态内部类才会被加载，把符号引用替换为直接引用，这时静态对象被创建，然后再被getInstance方法返回出去。
枚举单例，public，enum，INSTANCE。
# 适配器模式了解吗？
在应用程序中可能要两个不同的接口的类通信，在不修改这两个类前提下需要中间件完成这个衔接的过程。适配器模式就是将一个类的接口转化成客户期望的另一个接口。
类适配器，继承target接口，继承adaptee的实现，比如手机充电器，继承220伏被适配者，实现5伏的接口。
![alt text](image-3.png)
对象适配器，通过类对象组合实现适配，而不是继承。比如手机充电器，聚合一个220伏对象，实现5伏接口。
![alt text](image-4.png)
# 什么是代理模式？
代理模式本质是中间件，是一种结构性模式，代理类实现与真实对象相同的接口，并添加额外的控制逻辑，真实对象是实际执行任务的对象。
![alt text](image-5.png)
